/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.3.3
 * Product:       sps30
 * Model-Version: 1.0.0
 */

#include "sensirion_common.h"
#include "sensirion_shdlc.h"
#include "sensirion_test_setup.h"
#include "sensirion_uart_hal.h"
#include "sps30_uart.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_uart_hal_sleep_usec

TEST_GROUP (SPS30_Tests) {
    void setup() {
        int16_t error;
        error = sensirion_uart_hal_init(SERIAL_0);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_uart_hal_init");
    }

    void teardown() {
        int16_t error;
        error = sensirion_uart_hal_free();
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_uart_hal_free");
    }
};

TEST (SPS30_Tests, test_start_measurement1) {
    int16_t local_error = 0;
    uint16_t mc_1p0 = 0;
    uint16_t mc_2p5 = 0;
    uint16_t mc_4p0 = 0;
    uint16_t mc_10p0 = 0;
    uint16_t nc_0p5 = 0;
    uint16_t nc_1p0 = 0;
    uint16_t nc_2p5 = 0;
    uint16_t nc_4p0 = 0;
    uint16_t nc_10p0 = 0;
    uint16_t typical_particle_size = 0;
    uint32_t auto_cleaning_interval = 0;
    int8_t product_type[9] = {0};
    int8_t serial_number[32] = {0};
    uint8_t firmware_major_version = 0;
    uint8_t firmware_minor_version = 0;
    uint8_t reserved1 = 0;
    uint8_t hardware_revision = 0;
    uint8_t reserved2 = 0;
    uint8_t shdlc_major_version = 0;
    uint8_t shdlc_minor_version = 0;
    uint32_t device_status_register = 0;
    uint8_t reserved = 0;
    local_error = sps30_start_measurement((sps30_output_format)(261));
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_measurement");
    local_error = sps30_read_measurement_values_uint16(
        &mc_1p0, &mc_2p5, &mc_4p0, &mc_10p0, &nc_0p5, &nc_1p0, &nc_2p5, &nc_4p0,
        &nc_10p0, &typical_particle_size);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_values_uint16");
    printf("mc_1p0: %u ", mc_1p0);
    printf("mc_2p5: %u ", mc_2p5);
    printf("mc_4p0: %u ", mc_4p0);
    printf("mc_10p0: %u ", mc_10p0);
    printf("nc_0p5: %u ", nc_0p5);
    printf("nc_1p0: %u ", nc_1p0);
    printf("nc_2p5: %u ", nc_2p5);
    printf("nc_4p0: %u ", nc_4p0);
    printf("nc_10p0: %u ", nc_10p0);
    printf("typical_particle_size: %u\n", typical_particle_size);
    local_error = sps30_start_fan_cleaning();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_fan_cleaning");
    local_error = sps30_read_auto_cleaning_interval(&auto_cleaning_interval);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_auto_cleaning_interval");
    printf("auto_cleaning_interval: %u\n", auto_cleaning_interval);
    local_error = sps30_write_auto_cleaning_interval(604800);
    CHECK_EQUAL_ZERO_TEXT(local_error, "write_auto_cleaning_interval");
    local_error = sps30_read_product_type(product_type, 9);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_type");
    printf("product_type: %s\n", product_type);
    local_error = sps30_read_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_serial_number");
    printf("serial_number: %s\n", serial_number);
    local_error =
        sps30_read_version(&firmware_major_version, &firmware_minor_version,
                           &reserved1, &hardware_revision, &reserved2,
                           &shdlc_major_version, &shdlc_minor_version);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_version");
    printf("firmware_major_version: %u ", firmware_major_version);
    printf("firmware_minor_version: %u ", firmware_minor_version);
    printf("reserved1: %u ", reserved1);
    printf("hardware_revision: %u ", hardware_revision);
    printf("reserved2: %u ", reserved2);
    printf("shdlc_major_version: %u ", shdlc_major_version);
    printf("shdlc_minor_version: %u\n", shdlc_minor_version);
    local_error = sps30_read_device_status_register(1, &device_status_register,
                                                    &reserved);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_device_status_register");
    printf("device_status_register: %u ", device_status_register);
    printf("reserved: %u\n", reserved);
    local_error = sps30_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SPS30_Tests, test_sleep1) {
    int16_t local_error = 0;
    local_error = sps30_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "sleep");
    local_error = sps30_wake_up_sequence();
    CHECK_EQUAL_ZERO_TEXT(local_error, "wake_up_sequence");
}

TEST (SPS30_Tests, test_read_auto_cleaning_interval1) {
    int16_t local_error = 0;
    uint32_t auto_cleaning_interval = 0;
    local_error = sps30_read_auto_cleaning_interval(&auto_cleaning_interval);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_auto_cleaning_interval");
    printf("auto_cleaning_interval: %u\n", auto_cleaning_interval);
}

TEST (SPS30_Tests, test_write_auto_cleaning_interval1) {
    int16_t local_error = 0;
    local_error = sps30_write_auto_cleaning_interval(604800);
    CHECK_EQUAL_ZERO_TEXT(local_error, "write_auto_cleaning_interval");
}

TEST (SPS30_Tests, test_read_product_type1) {
    int16_t local_error = 0;
    int8_t product_type[9] = {0};
    local_error = sps30_read_product_type(product_type, 9);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_type");
    printf("product_type: %s\n", product_type);
}

TEST (SPS30_Tests, test_read_serial_number1) {
    int16_t local_error = 0;
    int8_t serial_number[32] = {0};
    local_error = sps30_read_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_serial_number");
    printf("serial_number: %s\n", serial_number);
}

TEST (SPS30_Tests, test_read_version1) {
    int16_t local_error = 0;
    uint8_t firmware_major_version = 0;
    uint8_t firmware_minor_version = 0;
    uint8_t reserved1 = 0;
    uint8_t hardware_revision = 0;
    uint8_t reserved2 = 0;
    uint8_t shdlc_major_version = 0;
    uint8_t shdlc_minor_version = 0;
    local_error =
        sps30_read_version(&firmware_major_version, &firmware_minor_version,
                           &reserved1, &hardware_revision, &reserved2,
                           &shdlc_major_version, &shdlc_minor_version);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_version");
    printf("firmware_major_version: %u ", firmware_major_version);
    printf("firmware_minor_version: %u ", firmware_minor_version);
    printf("reserved1: %u ", reserved1);
    printf("hardware_revision: %u ", hardware_revision);
    printf("reserved2: %u ", reserved2);
    printf("shdlc_major_version: %u ", shdlc_major_version);
    printf("shdlc_minor_version: %u\n", shdlc_minor_version);
}

TEST (SPS30_Tests, test_read_device_status_register1) {
    int16_t local_error = 0;
    uint32_t device_status_register = 0;
    uint8_t reserved = 0;
    local_error = sps30_read_device_status_register(1, &device_status_register,
                                                    &reserved);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_device_status_register");
    printf("device_status_register: %u ", device_status_register);
    printf("reserved: %u\n", reserved);
}

TEST (SPS30_Tests, test_device_reset1) {
    int16_t local_error = 0;
    local_error = sps30_device_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "device_reset");
}
